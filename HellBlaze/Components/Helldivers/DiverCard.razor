@using System.Text.Json
@using HellBlaze.Constants
@using HellBlaze.Models
@namespace HellBlaze.Components.Helldivers

<MudCard Class="mud-elevation-4" Style="position: relative;">
    <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error"
                   @onclick="() => OnRemove.InvokeAsync()"
                   Style="position: absolute; top: 4px; right: 4px; z-index: 2;"/>
    <MudCardHeader Class="player-header">
        <CardHeaderAvatar>
            <div class="avatar-container">
                <MudImage Src="@(Diver.Rank.Icon)"
                          ObjectFit="ObjectFit.Cover"
                          Style="width: 55px; height: 55px; background: transparent;"
                          Class="rounded-0"/>
                <div class="avatar-border" style="background-color: @GetPlayerColor();"></div>
            </div>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <div class="player-name" @onclick="StartEditing">
                @if (_isEditingName)
                {
                    <input @bind="_editName"
                           @bind:event="oninput"
                           @onblur="SaveName"
                           @onkeydown="HandleKeyDown"
                           @ref="_nameInputReference"
                           class="player-name-edit"/>
                }
                else
                {
                    <MudText Typo="Typo.body1" Style="margin: 0;">@(Diver.Name)</MudText>
                }
            </div>
            <MudText Typo="Typo.body2" Style="margin: 0;">@(Diver.Rank.Name)</MudText>
        </CardHeaderContent>
    </MudCardHeader>


    <MudCardContent>
        <MudStack Spacing="3">
            <MudPaper Elevation="0" Class="pa-3 d-flex flex-column"
                      Style="background-color: rgba(255, 255, 255, 0.05); min-height: 60px;">
                <MudText Typo="Typo.caption" Style="font-weight: bold; margin-bottom: 4px;">PRIMARY</MudText>
                <MudText Typo="Typo.body1" Class="d-flex align-right justify-right"
                         Style="flex-grow: 1; color: #FFE500;">
                    @Diver.Kit.Primary.Name
                </MudText>
            </MudPaper>
            <MudPaper Elevation="0" Class="pa-3 d-flex flex-column"
                      Style="background-color: rgba(255, 255, 255, 0.05); min-height: 60px;">
                <MudText Typo="Typo.caption" Style="font-weight: bold; margin-bottom: 4px;">SECONDARY</MudText>
                <MudText Typo="Typo.body1" Class="d-flex align-right justify-right"
                         Style="flex-grow: 1; color: #FFE500;">
                    @Diver.Kit.Secondary.Name
                </MudText>
            </MudPaper>
            <MudPaper Elevation="0" Class="pa-3 d-flex flex-column"
                      Style="background-color: rgba(255, 255, 255, 0.05); min-height: 60px;">
                <MudText Typo="Typo.caption" Style="font-weight: bold; margin-bottom: 4px;">THROWABLE</MudText>
                <MudText Typo="Typo.body1" Class="d-flex align-right justify-right"
                         Style="flex-grow: 1; color: #FFE500;">
                    @Diver.Kit.Throwable.Name
                </MudText>
            </MudPaper>
            <MudPaper Elevation="0" Class="pa-3 d-flex flex-column"
                      Style="background-color: rgba(255, 255, 255, 0.05); min-height: 60px;">
                <MudText Typo="Typo.caption" Style="font-weight: bold; margin-bottom: 4px;">ARMOUR</MudText>
                <MudText Typo="Typo.body1" Class="d-flex align-right justify-right"
                         Style="flex-grow: 1; color: #FFE500;">
                    @Diver.Kit.Armor.Name
                </MudText>
            </MudPaper>

            <MudSpacer></MudSpacer>


            <MudGrid Spacing="2" Justify="Justify.SpaceBetween">
                <MudItem Style="width: 20%; min-width: 50px;">
                    <div @onmouseover="() => ShowTooltip(Diver.Kit.Stratagem1.Name)"
                         @onmouseout="HideTooltip"
                         style="position: relative; width: 100%; height: 100%;">
                        <MudPaper Square="true" Style="aspect-ratio: 1/1; background-color: #222;">
                            <MudImage Src="@($"stratagems/{Diver.Kit.Stratagem1.Icon}")"
                                      Alt="@Diver.Kit.Stratagem1.Name" ObjectFit="ObjectFit.Cover"
                                      Style="width: 100%; height: 100%;"/>
                        </MudPaper>
                        @if (_activeTooltip == Diver.Kit.Stratagem1.Name)
                        {
                            <div class="custom-tooltip">@Diver.Kit.Stratagem1.Name</div>
                        }
                    </div>
                </MudItem>
                <MudItem Style="width: 20%; min-width: 50px;">
                    <div @onmouseover="() => ShowTooltip(Diver.Kit.Stratagem2.Name)"
                         @onmouseout="HideTooltip"
                         style="position: relative; width: 100%; height: 100%;">
                        <MudPaper Square="true"
                                  Style="aspect-ratio: 1/1; background-color: #222;">
                            <MudImage Src="@($"stratagems/{Diver.Kit.Stratagem2.Icon}")"
                                      Alt="@Diver.Kit.Stratagem2.Name" ObjectFit="ObjectFit.Cover"
                                      Style="width: 100%; height: 100%;"/>
                        </MudPaper>
                        @if (_activeTooltip == Diver.Kit.Stratagem2.Name)
                        {
                            <div class="custom-tooltip">@Diver.Kit.Stratagem2.Name</div>
                        }
                    </div>
                </MudItem>
                <MudItem Style="width: 20%; min-width: 50px;">
                    <div @onmouseover="() => ShowTooltip(Diver.Kit.Stratagem3.Name)"
                         @onmouseout="HideTooltip"
                         style="position: relative; width: 100%; height: 100%;">
                        <MudPaper Square="true"
                                  Style="aspect-ratio: 1/1; background-color: #222;">
                            <MudImage Src="@($"stratagems/{Diver.Kit.Stratagem3.Icon}")"
                                      Alt="@Diver.Kit.Stratagem3.Name" ObjectFit="ObjectFit.Cover"
                                      Style="width: 100%; height: 100%;"/>
                        </MudPaper>
                        @if (_activeTooltip == Diver.Kit.Stratagem3.Name)
                        {
                            <div class="custom-tooltip">@Diver.Kit.Stratagem3.Name</div>
                        }
                    </div>
                </MudItem>
                <MudItem Style="width: 20%; min-width: 50px;">
                    <div @onmouseover="() => ShowTooltip(Diver.Kit.Stratagem4.Name)"
                         @onmouseout="HideTooltip"
                         style="position: relative; width: 100%; height: 100%;">
                        <MudPaper Square="true"
                                  Style="aspect-ratio: 1/1; background-color: #222;">
                            <MudImage Src="@($"stratagems/{Diver.Kit.Stratagem4.Icon}")"
                                      Alt="@Diver.Kit.Stratagem4.Name" ObjectFit="ObjectFit.Cover"
                                      Style="width: 100%; height: 100%;"/>
                        </MudPaper>
                        @if (_activeTooltip == Diver.Kit.Stratagem4.Name)
                        {
                            <div class="custom-tooltip">@Diver.Kit.Stratagem4.Name</div>
                        }
                    </div>
                </MudItem>

                <MudItem Style="width: 20%; min-width: 50px;">
                    <div @onmouseover="() => ShowTooltip(Diver.Kit.Booster.Name)"
                         @onmouseout="HideTooltip"
                         style="position: relative; width: 100%; height: 100%;">
                        <MudPaper Square="true"
                                  Style="aspect-ratio: 1/1; background-color: #222;">
                            <MudImage Src="@($"boosters/{Diver.Kit.Booster.Icon}")"
                                      Alt="@Diver.Kit.Booster.Name" ObjectFit="ObjectFit.Cover"
                                      Style="width: 100%; height: 100%;"/>
                        </MudPaper>
                        @if (_activeTooltip == Diver.Kit.Booster.Name)
                        {
                            <div class="custom-tooltip">@Diver.Kit.Booster.Name</div>
                        }
                    </div>
                </MudItem>

            </MudGrid>


        </MudStack>
    </MudCardContent>

    <MudCardActions Class="pa-0">
        <MudButton Variant="Variant.Filled"
                   Class="@($"hd-ready-button {(IsReady ? "ready" : "not-ready")}")"
                   OnClick="ToggleReadyStatus"
                   Style="width: 100%; border-radius: 0; height: 40px; font-weight: bold;">
            @(IsReady ? "READY" : "NOT READY")
        </MudButton>
    </MudCardActions>

    <MudExpansionPanel>
        <TitleContent>
            <MudText>Warbond Filters</MudText>
        </TitleContent>
        <ChildContent>
            <MudGrid Spacing="1">
                @foreach (var warbond in AvailableWarbonds)
                {
                    <MudItem xs="4" sm="4" md="4" lg="4" xl="4">
                        <WarbondToggle
                            WarbondName="@warbond"
                            IsDisabled="@Diver.DisabledWarbonds.Contains(warbond)"
                            OnToggle="@(isDisabled => ToggleWarbond(warbond, isDisabled))"/>
                    </MudItem>
                }
            </MudGrid>
        </ChildContent>
    </MudExpansionPanel>


</MudCard>

<style>
    .hd-ready-button {
        position: relative;
        overflow: hidden;
        text-align: center;
        font-weight: bold;
        transition: all 0.3s ease;
        border: 2px solid #FFE500;
    }

    .hd-ready-button.not-ready {
        background-color: black !important;
        color: #FFE500 !important;
    }

    .hd-ready-button.ready {
        background-color: #FFE500 !important;
        color: black !important;
    }

    .hd-ready-button::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: repeating-linear-gradient(
            45deg,
            transparent,
            transparent 5px,
            rgba(255, 229, 0, 0.5) 5px,
            rgba(255, 229, 0, 0.5) 10px
        );
        z-index: 1;
        opacity: 0.3;
    }

    .hd-ready-button.ready::before {
        background-image: repeating-linear-gradient(
            45deg,
            transparent,
            transparent 5px,
            rgba(0, 0, 0, 0.5) 5px,
            rgba(0, 0, 0, 0.5) 10px
        );
    }

    .custom-tooltip {
        position: absolute;
        top: -30px;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        white-space: nowrap;
        z-index: 1000;
    }

    .player-name {
        cursor: pointer;
        display: inline-block;
    }

    .player-name:hover {
        background-color: rgba(255, 229, 0, 0.1);
        border-radius: 4px;
    }

    .player-name-edit {
        background: transparent;
        border: none;
        border-bottom: 1px solid rgba(255, 229, 0, 0.6);
        color: inherit;
        font-family: inherit;
        font-size: inherit;
        padding: 0;
        margin: 0;
        width: 100%;
        outline: none;
    }

    .avatar-container {
        position: relative;
        width: 55px;
        height: 55px;
        margin-right: 4px;
    }

    .avatar-border {
        position: absolute;
        top: 0;
        right: -3px;
        width: 4px;
        height: 100%;
        z-index: 1;
    }

    .player-header {
        padding-top: 18px;
        padding-bottom: 18px;
    }
</style>

@code {
    [Parameter] public Diver Diver { get; set; } = new() { Rank = new Rank() };
    [Parameter] public bool IsReady { get; set; }
    [Parameter] public EventCallback OnRemove { get; set; }
    [Parameter] public EventCallback<bool> OnReadyStatusChanged { get; set; }

    [Inject] private GameData GameData { get; set; } = null!;
    [Inject] private State State { get; set; } = null!;
    [Inject] private IJSRuntime JSRuntime { get; set; }

    private List<string> AvailableWarbonds = new();
    private bool _isEditingName;
    private string _editName = "";
    private bool _jsInteropReady;
    private ElementReference _nameInputReference;

    private string GetStorageKey(string name)
    {
        var sanitizedName = string.IsNullOrEmpty(name) ? "unknown" : name.Replace(" ", "_").Replace(".", "_");
        return $"hellblaze_player_warbonds_{sanitizedName}";
    }

    private void SaveWarbondsToStorage()
    {
        if (string.IsNullOrEmpty(Diver.Name))
            return;

        var playerKey = GetStorageKey(Diver.Name);
        var warbondsJson = JsonSerializer.Serialize(Diver.DisabledWarbonds);

        JSRuntime.InvokeVoidAsync("localStorage.setItem", playerKey, warbondsJson);
    }

    private async Task LoadWarbondsFromStorage()
    {
        try
        {
            var playerKey = GetStorageKey(Diver.Name);
            var warbondsJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", playerKey);

            if (!string.IsNullOrEmpty(warbondsJson))
            {
                var disabledWarbonds = JsonSerializer.Deserialize<HashSet<string>>(warbondsJson);
                if (disabledWarbonds != null)
                {
                    Diver.DisabledWarbonds = disabledWarbonds;
                }
            }

            AvailableWarbonds = GetUniqueWarbonds();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading warbonds: {ex.Message}");
        }
    }


    private void StartEditing()
    {
        if (!_isEditingName)
        {
            _isEditingName = true;
            _editName = Diver.Name;
            StateHasChanged();

            InvokeAsync(async () => await _nameInputReference.FocusAsync());
        }
    }

    private async Task SaveName()
    {
        if (!string.IsNullOrWhiteSpace(_editName) && Diver != null)
        {
            // Store old name
            var oldName = Diver.Name;
        
            // Update to new name
            Diver.Name = _editName;

            // Check if warbonds exist for the new name
            var playerKey = GetStorageKey(Diver.Name);
            var warbondsJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", playerKey);

            if (string.IsNullOrEmpty(warbondsJson))
            {
                // If no warbonds exist for new name, reset the disabled warbonds
                Diver.DisabledWarbonds = new HashSet<string>();
                // Then save the empty set to storage
                SaveWarbondsToStorage();
            }
            else
            {
                // If warbonds exist for new name, load them
                await LoadWarbondsFromStorage();
            }
        }

        _isEditingName = false;
    }


    private string GetPlayerColor()
    {
        return State.Players.IndexOf(Diver) switch
        {
            0 => HelldiversTheme.Colors.Player1,
            1 => HelldiversTheme.Colors.Player2,
            2 => HelldiversTheme.Colors.Player3,
            3 => HelldiversTheme.Colors.Player4,
            _ => HelldiversTheme.Colors.Player1
        };
    }


    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "Enter":
                await SaveName();
                break;
            case "Escape":
                _isEditingName = false;
                StateHasChanged();
                break;
        }
    }


    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsInteropReady = true;
            await LoadWarbondsFromStorage();
        }
    }


    private List<string> GetUniqueWarbonds()
    {
        var warbonds = new HashSet<string>();

        if (GameData.PrimaryWeapons != null)
            foreach (var item in GameData.PrimaryWeapons.Where(item => !string.IsNullOrEmpty(item.Warbond)))
                warbonds.Add(item.Warbond);

        if (GameData.SecondaryWeapons != null)
            foreach (var item in GameData.SecondaryWeapons.Where(item => !string.IsNullOrEmpty(item.Warbond)))
                warbonds.Add(item.Warbond);

        if (GameData.Throwables != null)
            foreach (var item in GameData.Throwables.Where(item => !string.IsNullOrEmpty(item.Warbond)))
                warbonds.Add(item.Warbond);

        if (GameData.Stratagems != null)
            foreach (var item in GameData.Stratagems.Where(item => !string.IsNullOrEmpty(item.Warbond)))
                warbonds.Add(item.Warbond);

        if (GameData.Boosters != null)
            foreach (var item in GameData.Boosters.Where(item => !string.IsNullOrEmpty(item.Warbond)))
                warbonds.Add(item.Warbond);

        return warbonds.ToList();
    }

    private void ToggleWarbond(string warbond, bool isDisabled)
    {
        if (isDisabled)
            Diver.DisabledWarbonds.Add(warbond);
        else
            Diver.DisabledWarbonds.Remove(warbond);

        SaveWarbondsToStorage();
    }


    private string _activeTooltip;

    private void ShowTooltip(string tooltipText)
    {
        _activeTooltip = tooltipText;
    }

    private void HideTooltip()
    {
        _activeTooltip = null;
    }


    private async Task ToggleReadyStatus()
    {
        IsReady = !IsReady;
        if (OnReadyStatusChanged.HasDelegate)
            await OnReadyStatusChanged.InvokeAsync(IsReady);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

}